{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"coesus2.0","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python2","display_name":"Python 2"}},"cells":[{"cell_type":"code","metadata":{"id":"cEs2ymZNMjS9","colab_type":"code","outputId":"390a5c2a-474c-40a2-df97-3aa8c033e45d","executionInfo":{"status":"ok","timestamp":1581433659118,"user_tz":-330,"elapsed":214489,"user":{"displayName":"Saminder Singh","photoUrl":"","userId":"15827963568791296442"}},"colab":{"base_uri":"https://localhost:8080/","height":308}},"source":["!pip install neat-python\n","from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Collecting neat-python\n","  Downloading https://files.pythonhosted.org/packages/f6/92/2778744d408304b77eb39c1edf91eaced1e18e1cd45a766a20fd1b716c22/neat-python-0.92.tar.gz\n","Building wheels for collected packages: neat-python\n","  Building wheel for neat-python (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for neat-python: filename=neat_python-0.92-cp27-none-any.whl size=43223 sha256=0d82ca21acefe69c2a4b96a9e1f77716941d073d1100daeeb777a372b2161c26\n","  Stored in directory: /root/.cache/pip/wheels/85/68/70/a82daae13e6e1046c2de6b25fedbedfd60f547f576fca2280e\n","Successfully built neat-python\n","Installing collected packages: neat-python\n","Successfully installed neat-python-0.92\n","Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"B45nEV0fM9tS","colab_type":"code","colab":{}},"source":["import  sys, time, random\n","import neat,os,pickle\n","from math import sqrt\n","difficulty = 120\n","difficulty_real = 30\n","\n","frame_size_x = 720\n","frame_size_y = 480\n","resume= False\n","root=\"gdrive/My Drive/Colab Notebooks/coeus/\"\n","restore_file=\"SnakeAiData\"\n","\n","class snake:\n","    def __init__(self):\n","        a=random.randrange(20,700,10)\n","        k=random.randrange(20,450,10)\n","        self.snake_pos=[a,k]\n","        self.snake_body = [[a, k], [a-10, k], [a-(2*10), k]]\n","        self.closeness=0\n","        self.snake_alive=True\n","        self.moves=72000\n","        self.rand_food_pos()\n","\n","    def rand_food_pos(self):\n","        self.food_pos = [random.randrange(1, (frame_size_x//10)) * 10, random.randrange(1, (frame_size_y//10)) * 10]\n","        self.food_spawn = True\n","        self.getstartdist()\n","\n","    def getstartdist(self):\n","        self.distOrig=abs(self.food_pos[0]-self.snake_pos[0])+abs(self.food_pos[1]-self.snake_pos[1])\n","        self.closeness=0\n","\n","    def getdistfit(self,ge):\n","            a=abs(self.food_pos[0]-self.snake_pos[0])+abs(self.food_pos[1]-self.snake_pos[1])\n","            if a<=self.distOrig:\n","                ge.fitness+=1\n","                self.closeness+=1\n","            else:\n","                ge.fitness-=2\n","                self.closeness-=2\n","            self.distOrig=a\n","    direction = 'RIGHT'\n","    change_to = direction\n","\n","    def get1dirinfo(self,x,y,xx,yy,fx,fy):\n","        global frame_size_x,frame_size_y\n","        while(x >= 0 and x <= frame_size_x and y >= 0 and y <= frame_size_y):\n","            x += xx\n","            y += yy\n","            if(x==fx and y==fy):\n","                return int(0)\n","            else:\n","                for sx,sy in enumerate(self.snake_body):\n","                    if x==sx and y==sy:\n","                        return int(1)\n","                else:\n","                    return int(2)\n","\n","    def getdirinfo(self):\n","        dir = []\n","        # 0 food        # 1 body        # 2 boundary\n","        dir.append(self.get1dirinfo(self.snake_pos[0],self.snake_pos[1],0,-10,self.food_pos[0],self.food_pos[1]))#up\n","        dir.append(self.get1dirinfo(self.snake_pos[0],self.snake_pos[1],0,10,self.food_pos[0],self.food_pos[1]))#DOWN\n","        dir.append(self.get1dirinfo(self.snake_pos[0],self.snake_pos[1],-10,0,self.food_pos[0],self.food_pos[1]))#Left\n","        dir.append(self.get1dirinfo(self.snake_pos[0],self.snake_pos[1],10,0,self.food_pos[0],self.food_pos[1]))#RIGHT\n","        return dir\n","    def getquaterinfo(self,food,head):\n","        qs=[]\n","        if(head[0]>=food[0] and head[1]<=food[1]): #Q1\n","            qs.append(1)\n","        else:\n","            qs.append(0)\n","        if(head[0]>=food[0] and head[1]>=food[1]): #Q2\n","            qs.append(1)\n","        else:\n","            qs.append(0)\n","        if(head[0]<=food[0] and head[1]>=food[1]):#Q3\n","            qs.append(1)\n","        else:\n","            qs.append(0)\n","        if(head[0]<=food[0] and head[1]<=food[1]):#Q4\n","            qs.append(1)\n","        else:\n","            qs.append(0)\n","        return qs\n","\n","    def give_arg(self):\n","        sx = self.snake_pos[0]\n","        sy = self.snake_pos[1]\n","        quaterinfo = self.getquaterinfo(self.food_pos,self.snake_pos)\n","        dirs = self.getdirinfo()\n","        return (self.snake_pos[0],self.snake_pos[1],self.food_pos[0],self.food_pos[1],quaterinfo[0],quaterinfo[1],quaterinfo[2],quaterinfo[3],dirs[0],dirs[1],dirs[2],dirs[3])\n","\n","def play_game(genomes, config):\n","    for _,ge in genomes:\n","        net = neat.nn.recurrent.RecurrentNetwork.create(ge, config)\n","        sn =snake()\n","        sn.snake_alive = True\n","        ge.fitness=0\n","        while (sn.snake_alive and sn.moves> 0):\n","            args =  sn.give_arg()\n","            output = net.activate(args)\n","            sn.getdistfit(ge)\n","            if(output[0] == max(output) and not sn.direction == 'DOWN'):\n","                sn.snake_pos[1] -= 10\n","                sn.direction = 'UP'\n","            elif(output[1] == max(output) and not sn.direction == 'UP'):\n","                sn.snake_pos[1] += 10\n","                sn.direction = 'DOWN'\n","            elif(output[2] == max(output) and not sn.direction == 'RIGHT'):\n","                sn.snake_pos[0] -= 10\n","                sn.direction = 'LEFT'\n","            elif(output[3] == max(output) and not sn.direction == 'LEFT'):\n","                sn.snake_pos[0] += 10\n","                sn.direction = 'RIGHT'\n","            # Snake body growing mechanism\n","            sn.snake_body.insert(0, list(sn.snake_pos))\n","            if sn.snake_pos[0] == sn.food_pos[0] and sn.snake_pos[1] == sn.food_pos[1]:\n","                sn.food_spawn = False\n","            else:\n","                sn.snake_body.pop()\n","            # Spawning food on the screen\n","            if not sn.food_spawn:\n","                sn.rand_food_pos()\n","            # GFX\n","            if sn.snake_pos[0] < 0 or sn.snake_pos[0] > frame_size_x-10:\n","                # game_over\n","                sn.snake_alive = False\n","                break\n","            if sn.snake_pos[1] < 0 or sn.snake_pos[1] > frame_size_y-10:\n","                # game_over\n","                sn.snake_alive = False\n","                break\n","            # Touching the snake body\n","            for block in sn.snake_body[1:]:\n","                if sn.snake_pos[0] == block[0] and sn.snake_pos[1] == block[1]:\n","                    # game_over\n","                    sn.snake_alive = False\n","                    break\n","def gg(conf_f):\n","    conf = neat.config.Config(neat.DefaultGenome, neat.DefaultReproduction,\n","                            neat.DefaultSpeciesSet, neat.DefaultStagnation,\n","                            conf_f)\n","    if resume == True:\n","        p = neat.Checkpointer.restore_checkpoint(restore_file)\n","    else:\n","        p = neat.Population(conf)\n","    p.add_reporter(neat.StdOutReporter(True))\n","    stats = neat.StatisticsReporter()\n","    p.add_reporter(stats)\n","    winner = p.run(play_game, 200)\n","    print('Writing Data')\n","    with open(root+'winner.pkl', 'wb') as output:\n","        pickle.dump(winner, output, 1)\n","\n","    drive.flush_and_unmount()\n","if __name__ == '__main__':\n","    conf_file = root+'conf.txt'\n","    gg(conf_file)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7oG-PH_G5Rc6","colab_type":"code","colab":{}},"source":["!git clone"],"execution_count":0,"outputs":[]}]}